package main

import "fmt"

/*
Функция fetchUsers получает данные пользователей по API используя готовый API клиент,
который запрашивает данные у стороннего сервиса.
Каждый запрос занимает немного времени, поэтому было бы разумно распараллелить эти запросы
и стараться начать обрабатывать результаты по мере их получения от API.

Для этой цели используется паттерн - генератор, когда fetchUsers должна возвратить не
всех пользователей полученных от API, а каждого по отдельности по мере получения ответа
от API.
Для реализации паттерна используются каналы, поэтому задача состоит в том, чтобы изменить
fetchUsers с использованием каналов (в данном случае понадобится только 1).
Важно, чтобы поток управления доходил до последнего принта и выводилось "Done!". В реальных проектах
это нужно, чтобы код выполнялся далее, а не блокировался.
*/

func fetchUsers(cli *ApiClient, userIds ...int) []User {
	users := make([]User, 0, len(userIds))

	for _, userID := range userIds {
		users = append(users, cli.GetUser(userID))
	}

	return users
}

func main() {
	userIds := []int{1, 3, 8, 12, 17, 22, 24, 30, 40}
	cli := new(ApiClient)

	for _, user := range fetchUsers(cli, userIds...) {
		fmt.Println(user)
	}

	fmt.Println("Done!")
}
